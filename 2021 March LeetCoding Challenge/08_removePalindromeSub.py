# https://leetcode.com/explore/challenge/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3665/


# Remove Palindromic Subsequences


# Given a string s consisting only of letters 'a' and 'b'. 
# In a single step you can remove one palindromic subsequence from s.
# Return the minimum number of steps to make the given string empty.

# A string is a subsequence of a given string, if it is generated by deleting 
# some characters of a given string without changing its order.

# A string is called palindrome if is one that reads the same backward as well as forward.


# Example 1:
# Input: s = "ababa"
# Output: 1
# Explanation: String is already palindrome

# Example 2:
# Input: s = "abb"
# Output: 2
# Explanation: "abb" -> "bb" -> "". 
# Remove palindromic subsequence "a" then "bb".

# Example 3:
# Input: s = "baabb"
# Output: 2
# Explanation: "baabb" -> "b" -> "". 
# Remove palindromic subsequence "baab" then "b".
 

# Constraints:
# 1 <= s.length <= 1000
# s[i] is either 'a' or 'b'.


def removePalindromeSub(s: str) -> int:
    if not s:
        return 0
    left, right = 0, len(s) - 1
    while left < right:
        if s[left] != s[right]:
            return 2
        left += 1
        right -= 1
    return 1

assert(removePalindromeSub("ababa") == 1)
assert(removePalindromeSub("abb") == 2)
assert(removePalindromeSub("baabb") == 2)








